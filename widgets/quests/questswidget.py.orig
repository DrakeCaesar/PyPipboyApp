# -*- coding: utf-8 -*-
import os
from PyQt5 import QtWidgets, QtCore, QtGui, uic
from PyQt5.QtGui import *
from widgets import widgets

class QuestsWidget(widgets.WidgetBase):
    _signalInfoUpdated = QtCore.pyqtSignal()
    questsmodel = QStandardItemModel()
    ObjectivesModel = QStandardItemModel()
    
    def __init__(self, mhandle, parent):
        super().__init__('Quests', parent)
        self.widget = uic.loadUi(os.path.join(mhandle.basepath, 'ui', 'questswidget.ui')) #Get UI Info
        self.setWidget(self.widget)
        self._signalInfoUpdated.connect(self._slotInfoUpdated)
        
    def init(self, app, datamanager):
        super().init(app, datamanager)
        self.dataManager = datamanager
        self.dataManager.registerRootObjectListener(self._onPipRootObjectEvent)
        self.widget.questView.doubleClicked.connect(self._slotTableDoubleClicked)
        self.widget.questView.clicked.connect(self._slotTableClicked)
        
        self.QuestSelected = False
        self.SelectedQuestInfoId = -1
        
        self._app = app
        
    def _onPipRootObjectEvent(self, rootObject):
        self.pipQuestsInfo = rootObject.child('Quests')
        if self.pipQuestsInfo:
            self.pipQuestsInfo.registerValueUpdatedListener(self._onPipPlayerInfoUpdate, 4)
        self._signalInfoUpdated.emit()

    def _onPipPlayerInfoUpdate(self, caller, value, pathObjs):
        self._signalInfoUpdated.emit()
        
    @QtCore.pyqtSlot()
    def _slotInfoUpdated(self):
        self.updateQuestsViews()
        self.updateQuestObjectives(self.SelectedQuestInfoId)
    
    @QtCore.pyqtSlot(QtCore.QModelIndex)
    def _slotTableDoubleClicked(self, index):
        model = self.widget.questView.model() # Get Table Model
        newindex = model.index(index.row(), 0) # Get the cell index that was clicked
        dataid = int(model.data(newindex)) # Get the data out of the cell
        modelchild = self.pipQuestsInfo.child(dataid) # Get the pipid of the id we got from the cell
        
        self.dataManager.rpcToggleQuestActive(modelchild) # Toggle that shiz
    
    @QtCore.pyqtSlot(QtCore.QModelIndex)
    def _slotTableClicked(self, index):
        model = self.widget.questView.model()
        newindex = model.index(index.row(), 0)
        dataid = int(model.data(newindex))
        
        if self.SelectedQuestInfoId == dataid:
            if self.QuestSelected:
                dataid = -1
                self.QuestSelected = False
            else:
                self.QuestSelected = True
        else:
            self.QuestSelected = True
        
        self.updateQuestObjectives(dataid)
        self.SelectedQuestInfoId = dataid
    
    def updateQuestsViews(self):
        self.questsmodel.clear()
        font = QtGui.QFont()
        font.setBold(True)
        
        for i in range(0, self.pipQuestsInfo.childCount()):
            name = str(self.pipQuestsInfo.child(i).child('text').value())
            active = self.pipQuestsInfo.child(i).child('active').value()
            enabled = self.pipQuestsInfo.child(i).child('enabled').value()
            
            if enabled:
                namecell = QStandardItem(name)
                
                if active:
                    namecell.setFont(font)
                
                item = [
                    QStandardItem(str(i)),
                    namecell
                ]
                self.questsmodel.appendRow(item)
        
        self.widget.questView.horizontalHeader().setStretchLastSection(True)
        self.widget.questView.verticalHeader().setStretchLastSection(False)
        self.widget.questView.setModel(self.questsmodel)
        self.widget.questView.sortByColumn(1, QtCore.Qt.AscendingOrder)
        self.widget.questView.hideColumn(0)

    def updateQuestObjectives(self, questInfoId):
        self.ObjectivesModel.clear()
        self.widget.descriptionLabel.setText("")
        
        if questInfoId != -1:
            HighlightFont = QtGui.QFont()
            HighlightFont.setBold(True)
            
            self.widget.descriptionLabel.setText(self.pipQuestsInfo.child(questInfoId).child("desc").value())
            
            Objectives = self.pipQuestsInfo.child(questInfoId).child("objectives")
            
            for i in range(0, Objectives.childCount()):
                Text = str(Objectives.child(i).child("text").value())
                Completed = Objectives.child(i).child("completed").value()
                Enabled = Objectives.child(i).child("enabled").value()
                
                TextCell = QStandardItem(Text)
                
                if Enabled and not Completed:
                    TextCell.setFont(HighlightFont)
                
                TableItem = [
                    TextCell,
                    QStandardItem(str(Completed))
                ]
                self.ObjectivesModel.appendRow(TableItem)
            
            self.widget.objectiveView.horizontalHeader().setStretchLastSection(True)
            self.widget.objectiveView.verticalHeader().setStretchLastSection(False)
            self.widget.objectiveView.setModel(self.ObjectivesModel)
            self.widget.objectiveView.sortByColumn(1, QtCore.Qt.AscendingOrder)
            self.widget.objectiveView.hideColumn(1)